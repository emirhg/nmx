psql -c "CREATE USER admin_catalogonoms WITH PASSWORD 'password.complicada';"
psql -c "CREATE DATABASE catalogonoms OWNER admin_catalogonoms;"
psql -c "CREATE USER usuario_catalogonom WITH PASSWORD 'password';"

psql -c "CREATE TABLE dof (fecha date, url text, respuesta json, servicio text);" catalogonoms
psql -c "CREATE TABLE notasNOM (fecha date, cod_nota int, claveNOM text, claveNOMNorm text, titulo text, etiqueta text, url text);" catalogonoms

psql -c "GRANT SELECT ON ALL TABLES IN SCHEMA public TO usuario_catalogonom" catalogonoms
#psql -c "GRANT ALL PRIVILIGES ON ALL TABLES IN SCHEMA public TO admin_catalogonoms" catalogonoms

nohup psql -h 127.0.0.1 -U admin_catalogonoms -d catalogonoms -c "insert into dof select * from getdoftable(date'1990-1-1', date'1990-12-31');"&

nohup for year in {1990..2014}; do psql -h 127.0.0.1 -U admin_catalogonoms -d catalogonoms -c "SET client_min_messages TO WARNING;insert into dof select * from getdoftable(date'$year-1-1', date'$year-12-31');" ; done &


WITH notasnomdistinct AS (SELECT distinct clavenomnorm from notasnom)
select clavenomnorm from notasnomdistinct order by (regexp_matches(clavenomnorm,'NOM(?:[^a-z0-9])(\d[a-z0-9\/]*[^a-z0-9])?([a-z][a-z0-9\/]*(?:[^a-z0-9](?:[a-z][a-z0-9\/]*[^a-z0-9]?)?)?)?(\d[a-z0-9\/]*[^a-z0-9])?','gi'))[2],(regexp_matches(clavenomnorm,'NOM(?:[^a-z0-9])(\d[a-z0-9\/]*[^a-z0-9])?([a-z][a-z0-9\/]*(?:[^a-z0-9](?:[a-z][a-z0-9\/]*[^a-z0-9]?)?)?)?(\d[a-z0-9\/]*[^a-z0-9])?','gi'))[1],(regexp_matches(clavenomnorm,'NOM(?:[^a-z0-9])(\d[a-z0-9\/]*[^a-z0-9])?([a-z][a-z0-9\/]*(?:[^a-z0-9](?:[a-z][a-z0-9\/]*[^a-z0-9]?)?)?)?(\d[a-z0-9\/]*[^a-z0-9])?','gi'))[3];


csvoperations/transformTSV.sh -s 1 -r 1,4-376 -c 2,3,4,10,11,14,15,18,19,22,23,28,29,30,55 -v 2,2 data/Matriz\ NOMs\ \(TODAS\).xlsx > data/NOMS-Knowledgebase.tsv

------- CARGA LA BASE DE CONOCIMIENTO --------------
CREATE TABLE knowledgebase (claveNOMNorm text, etiqueta text, urlnota text);
\COPY knowledgebase FROM 'data/NOMS-Knowledgebase.tsv' WITH CSV DELIMITER E'\t';
delete from knowledgebase where urlnota is null;
UPDATE notasnom SET etiqueta = knowledgebase.etiqueta FROM knowledgebase WHERE notasnom.clavenomnorm = knowledgebase.clavenomnorm and notasnom.urlnota = knowledgebase.urlnota AND knowledgebase.etiqueta is not null;
------- FIN DE LA BASE DE CONOCIMIENTO --------------



CREATE OR REPLACE FUNCTION classifyNOM(clavenom text, titulo text)
  RETURNS TEXT
AS $$
  import nltk
  import re
  import html.parser
  import json
  
  def nom_features(clavenom,titulo):
    featureset = {}

    queryresult = plpy.execute("select lower(entity2char(getpartialSentence('"+clavenom+"','"+titulo+"'))) as context",1);

    if queryresult.nrows() > 0:
      context = queryresult[0]['context'].strip()
      context = re.sub(clavenom + '.*$','',context, re.IGNORECASE)
    for word in context.split(' '):
      if word in featureset.keys():
        featureset[word] = featureset[word]+1;
      else:
        featureset[word] = 1;

    featureset['context'] = context;
    featureset['firstword'] = context.split(' ')[0]
    featureset['lastword'] = context.split(' ')[-1]
    featureset['countwords'] = len(context.split(' '))
    return featureset

  featuresets = []
  knowledgeTable = plpy.execute("SELECT relname FROM pg_class WHERE relname='featuresets';")
  if (knowledgeTable.nrows()==0):
    plpy.execute('CREATE TEMPORARY TABLE featuresets(features text, etiqueta text)');
  
    knowledgeBase = plpy.execute('SELECT clavenom, titulo, etiqueta FROM notasnom WHERE etiqueta IS NOT NULL;')
    
    for value in knowledgeBase:
      features = nom_features(value['clavenom'], value['titulo'])
      featuresets.append((features, value['etiqueta']));
      plpy.execute('INSERT INTO featuresets VALUES (\''+ json.dumps(features) + '\',\'' + value['etiqueta']+'\')')
  else:
    knowledgeBase = plpy.execute('SELECT features, etiqueta FROM featuresets;')
    for value in knowledgeBase:
      featuresets.append((json.loads(value['features']), value['etiqueta']));
      
  train_set = featuresets
  classifier = nltk.NaiveBayesClassifier.train(train_set)

  titulounescape =  html.parser.HTMLParser().unescape(titulo)

  return classifier.classify(nom_features(clavenom,titulounescape))
  
$$ LANGUAGE plpython3u;
